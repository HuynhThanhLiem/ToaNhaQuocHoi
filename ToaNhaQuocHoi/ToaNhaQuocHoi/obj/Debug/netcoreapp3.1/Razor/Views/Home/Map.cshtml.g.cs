#pragma checksum "D:\HK7\GIS\scr\ToaNhaQuocHoi\ToaNhaQuocHoi\Views\Home\Map.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Map), @"mvc.1.0.view", @"/Views/Home/Map.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\HK7\GIS\scr\ToaNhaQuocHoi\ToaNhaQuocHoi\Views\_ViewImports.cshtml"
using ToaNhaQuocHoi;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\HK7\GIS\scr\ToaNhaQuocHoi\ToaNhaQuocHoi\Views\_ViewImports.cshtml"
using ToaNhaQuocHoi.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b", @"/Views/Home/Map.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"df69ff5b01a426ade81a9bdc9044936102331b7f", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Map : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("shortcut icon"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("image/icon"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/shortcut.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/font-awesome.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/slick.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("switcher"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/theme-color/default-theme.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/style.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/site.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("navbar-brand"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-area", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Home", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Tour", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Contact", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\HK7\GIS\scr\ToaNhaQuocHoi\ToaNhaQuocHoi\Views\Home\Map.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b9435", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"" />
    <meta name=""viewport"" content=""initial-scale=1,maximum-scale=1,user-scalable=no"" />
    <title>Bản đồ 3D</title>

    <style>
        html,
        body,
        #viewDiv {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }

        #back {
            position: absolute;
            bottom: 20px;
        }

            #back i {
                background-image: url(app/public/img/back.svg);
                background-repeat: no-repeat;
                display: inline-block;
                width: 100px;
                height: 25px;
                padding-left: 25px;
                padding-top: 2px;
                margin: 10px;
                cursor: pointer;
                background-size: 20px;
            }
    </style>

    <!-- Favicon -->
    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b10588", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <!-- Font Awesome -->\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css\" rel=\"stylesheet\">\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b12001", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <!-- Bootstrap -->\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b13120", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <!-- Slick slider -->\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b14328", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <!-- Theme color -->\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b15536", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <!-- Main Style -->\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b16830", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b18010", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <!-- Fonts -->
    <!-- Open Sans for body font -->
    <link href=""https://fonts.googleapis.com/css?family=Open+Sans:300,400,400i,600,700,800"" rel=""stylesheet"">
    <!-- Montserrat for title -->
    <link href=""https://fonts.googleapis.com/css?family=Montserrat"" rel=""stylesheet"">


    <link rel=""stylesheet"" href=""https://js.arcgis.com/4.16/esri/themes/light/main.css"" />
    <script src=""https://js.arcgis.com/4.16/""></script>

    <script>
        require([
            ""esri/Map"",
            ""esri/views/SceneView"",
            ""esri/layers/GeoJSONLayer"",
            ""esri/layers/SceneLayer"", ""esri/layers/GraphicsLayer"", ""esri/Graphic"", ""esri/request"",
        ], function (Map, SceneView, GeoJSONLayer, SceneLayer,
            GraphicsLayer, Graphic, esriRequest) {
            var createGraphic = function (data) {
                return new Graphic({
                    geometry: data,
                    symbol: data.symbol,
                    attributes: data,
                 ");
                WriteLiteral(@"   popupTemplate: data.popupTemplate
                });
            };

            /* ----- COLUMN LAYER----- */
            //Cột 26m
            const columnALayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=1""
            });

            columnALayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 26,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Cột 16m
            const columnBLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=2""
            });

            columnBLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon");
                WriteLiteral(@"-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 16,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Cột 9.55m
            const columnCLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=17""
            });

            columnCLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 9.55,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Cột 19.55m
            const columnDLayer = new GeoJSONLayer({
                url: ""https://lo");
                WriteLiteral(@"calhost:44305/api/getcoordinates?id=18""
            });

            columnDLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 19.55,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Cột 14m
            const columnELayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=19""
            });

            columnELayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 14,
                        material: {
                            color: ""rgb(251, 249, 243)""
       ");
                WriteLiteral(@"                 }
                    }]
                }
            };

            //Cột ngang tầng 1
            const rowColumnLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=8""
            });

            rowColumnLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.55,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            /* ------ END COLUMN ------*/

            /* ----- STAIRCASE LAYER----- */

            //Bậc thang 0.14m
            const stairCaseALayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=20""
            });

            stairCaseALayer.renderer = {
          ");
                WriteLiteral(@"      type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.14,
                        material: {
                            color: ""rgb(218,219,213)""
                        }
                    }]
                }
            };

            //Bậc thang 0.20
            const stairCaseBLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=21""
            });

            stairCaseBLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.2,
                        material: {
                            color: ""rgb(218,219,213)""
                        }
                    }]
                }
            };

            //Bậc t");
                WriteLiteral(@"hang 0.98m
            const stairCaseCLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=22""
            });

            stairCaseCLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.98,
                        material: {
                            color: ""rgb(218,219,213)""
                        }
                    }]
                }
            };

            //Bậc thang 1.4m
            const stairCaseDLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=23""
            });

            stairCaseDLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                       ");
                WriteLiteral(@" size: 1.4,
                        material: {
                            color: ""rgb(218,219,213)""
                        }
                    }]
                }
            };

            //Lan can
            const railingLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=41""
            });

            railingLayer.renderer = {
                type: ""simple"",
                field: ""mag"",
                symbol: {
                    type: ""simple-fill"",
                    color: ""rgb(218,219,213)"",
                    outline: {
                        color: ""rgb(218,219,213)""
                    }
                }
            };

            //Mái hiên
            const eavesLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=29""
            });

            eavesLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3");
                WriteLiteral(@"d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.3,
                        material: {
                            color: ""rgb(94, 107, 110)""
                        }
                    }]
                }
            };

            //Phủ mái hiên
            const coverEavesLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=28""
            });

            coverEavesLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.1,
                        material: {
                            color: ""rgb(174, 190, 194)""
                        }
                    }]
                }
            };

            /* ----- ENDSTAIRCASE LAYER----- */

            /* ------ FLOOR LAYER ------*/
          ");
                WriteLiteral(@"  //Nền nhà
            const floorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=24""
            });

            floorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 1.4,
                        material: {
                            color: ""rgb(116, 113, 109)""
                        }
                    }]
                }
            };

            //Tường tầng 1
            const wallFirstFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=36""
            });

            wallFirstFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        s");
                WriteLiteral(@"ize: 6.45,
                        material: {
                            color: ""rgb(218,219,213)""
                        }
                    }]
                }
            };

            //Tầng 1
            const firstFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=37""
            });

            firstFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 6.45,
                        material: {
                            color: ""rgba(190,214,229,0.5)""
                        }
                    }]
                }
            };

            //Cửa kính
            const glassFirstFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=35""
            });

            glassFirstFloorLayer.rendere");
                WriteLiteral(@"r = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 6.45,
                        material: {
                            color: ""rgb(227, 227, 202)""
                        }
                    }]
                }
            };

            //Khung ngang cửa chính
            const frameAMainDoorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=30""
            });

            frameAMainDoorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.1,
                        material: {
                            color: ""rgb(113, 102, 80)""
                        }
                    }]
                }
  ");
                WriteLiteral(@"          };

            //Khung dọc cửa chính 4m
            const frameBMainDoorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=31""
            });

            frameBMainDoorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 4,
                        material: {
                            color: ""rgb(113, 102, 80)""
                        }
                    }]
                }
            };

            //Khung dọc cửa chính 6m
            const frameCMainDoorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=34""
            });

            frameCMainDoorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
 ");
                WriteLiteral(@"                       type: ""extrude"",
                        size: 6,
                        material: {
                            color: ""rgb(113, 102, 80)""
                        }
                    }]
                }
            };

            //Kính cửa chính
            const glassAMainDoorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=32""
            });

            glassAMainDoorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 3.8,
                        material: {
                            color: ""rgba(190,214,229,0.3)""
                        }
                    }]
                }
            };

            //Kính dài cửa chính
            const glassBMainDoorLayer = new GeoJSONLayer({
                url: ""https://localhost:4430");
                WriteLiteral(@"5/api/getcoordinates?id=33""
            });

            glassBMainDoorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 1.875,
                        material: {
                            color: ""rgba(190,214,229,0.3)"",
                        }
                    }]
                }
            };

            //Tầng 2
            const secondFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=39""
            });

            secondFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.5,
                        material: {
                            color: ""rgba(190,214,229,0.5)");
                WriteLiteral(@"""
                        }
                    }]
                }
            };
            //Khối tầng 2
            const secondBlockFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=40""
            });

            secondBlockFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 4.95,
                        material: {
                            color: ""rgba(190,214,229,0.5)""
                        }
                    }]
                }
            };

            //Tầng 3
            const thirdFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=11""
            });

            thirdFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""poly");
                WriteLiteral(@"gon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 3.9,
                        material: {
                            color: ""rgba(190,214,229,0.5)""
                        }
                    }]
                }
            };

            //Tầng 4-5
            const lastFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=12""
            });

            lastFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 4.65,
                        material: {
                            color: ""rgba(190,214,229,0.5)""
                        }
                    }]
                }
            };

            //Trung tâm
            const centerFloorLayer = new GeoJSONLayer({
                ");
                WriteLiteral(@"url: ""https://localhost:44305/api/getcoordinates?id=42""
            });

            centerFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 13.45,
                        material: {
                            color: ""rgb(190,214,229)""
                        }
                    }]
                }
            };

            //Kính hành lang tầng 3
            const glassFloorALayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=13""
            });

            glassFloorALayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 3.9,
                        material: {
                       ");
                WriteLiteral(@"     color: ""rgba(190,214,229,0.25)""
                        }
                    }]
                }
            };

            //Kính hành lang tầng 4-5
            const glassFloorBLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=14""
            });

            glassFloorBLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 4.65,
                        material: {
                            color: ""rgba(190,214,229,0.25)""
                        }
                    }]
                }
            };

            //Trần nhà
            const roofFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=9""
            });

            roofFloorLayer.renderer = {
                type: ""simple"",
                sym");
                WriteLiteral(@"bol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.05,
                        material: {
                            color: ""rgb(218,219,213)""
                        }
                    }]
                }
            };

            //Trần tầng
            const roofFirstFloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=38""
            });

            roofFirstFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.05,
                        material: {
                            color: ""rgb(218,219,213)""
                        }
                    }]
                }
            };

            //Trần lan can
            const roofRailing");
                WriteLiteral(@"FloorLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=15""
            });

            roofRailingFloorLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.05,
                        material: {
                            color: ""rgb(190,214,229)""
                        }
                    }]
                }
            };

            /* ------ ROOF DETAIL LAYER ------*/
            //Kính tròn trên mái
            const glassCircleRoofLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=10""
            });

            glassCircleRoofLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ");
                WriteLiteral(@"""extrude"",
                        size: 0.55,
                        material: {
                            color: ""rgba(190,214,229,0.75)""
                        }
                    }]
                }
            };

            //Kính tròn nhỏ trên mái
            //const glassBCircleRoofLayer = new GeoJSONLayer({
            //    url: ""https://localhost:44305/api/getcoordinates?id=10""
            //});
            
            //glassBCircleRoofLayer.renderer = {
            //    type: ""simple"",
            //    symbol: {
            //        type: ""polygon-3d"",
            //        symbolLayers: [{
            //            type: ""extrude"",
            //            size: 0.55,
            //            material: {
            //                color: ""rgba(190,214,229,0.75)""
            //            }
            //        }]
            //    }
            //};

            //Mặt cong
            const roundFaceLayer = new GeoJSONLayer({
                url: """);
                WriteLiteral(@"https://localhost:44305/api/getcoordinates?id=3""
            });

            roundFaceLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0,
                        material: {
                            color: ""rgb(211, 223, 174)""
                        },
                        edges: {
                            type: ""solid"",
                            size: ""1px"",
                            color: ""rgb(143, 132, 84)"",
                        }
                    }]
                }
            };

            //Vòng tròn nhỏ
            const smallCircleLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=4""
            });

            smallCircleLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polyg");
                WriteLiteral(@"on-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.55,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Mặt tròn chính
            const mainCircleLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=7""
            });

            mainCircleLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.55,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Cột vòm trời
            const columnCircleLayer = new GeoJSONLayer({
           ");
                WriteLiteral(@"     url: ""https://localhost:44305/api/getcoordinates?id=5""
            });

            columnCircleLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.55,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Cột trên mái
            const columnRoofCircleLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=6""
            });

            columnRoofCircleLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.55,
                        material: {
                ");
                WriteLiteral(@"            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Trụ trên mái
            const columnRoofLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=25""
            });

            columnRoofLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 2,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Chi tiết mái
            const detailRoofLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=26""
            });

            detailRoofLayer.renderer = {
                type: ""simple"",
                symbol: {
  ");
                WriteLiteral(@"                  type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.55,
                        material: {
                            color: ""rgb(251, 249, 243)""
                        }
                    }]
                }
            };

            //Mặt kính mái
            const glassRoofLayer = new GeoJSONLayer({
                url: ""https://localhost:44305/api/getcoordinates?id=27""
            });

            glassRoofLayer.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [{
                        type: ""extrude"",
                        size: 0.2,
                        material: {
                            color: ""rgba(190,214,229,0.75)""
                        }
                    }]
                }
            };

            /*END DETAIL ROOF */

            const map = new Map");
                WriteLiteral(@"({
                basemap: ""topo-vector"",
                ground: ""world-elevation"",
                layers: [
                    columnALayer,
                    columnBLayer,
                    columnCLayer,
                    columnDLayer,
                    columnELayer,
                    rowColumnLayer,
                    stairCaseALayer,
                    stairCaseBLayer,
                    stairCaseCLayer,
                    stairCaseDLayer,
                    railingLayer,
                    eavesLayer,
                    coverEavesLayer,
                    floorLayer,
                    wallFirstFloorLayer,
                    firstFloorLayer,
                    glassFirstFloorLayer,
                    frameAMainDoorLayer,
                    frameBMainDoorLayer,
                    frameCMainDoorLayer,
                    glassAMainDoorLayer,
                    glassBMainDoorLayer,
                    secondFloorLayer,
                    secondBlockFl");
                WriteLiteral(@"oorLayer,
                    thirdFloorLayer,
                    lastFloorLayer,
                    centerFloorLayer,
                    glassFloorALayer,
                    glassFloorBLayer,
                    roofFloorLayer,
                    roofFirstFloorLayer,
                    roofRailingFloorLayer,
                    glassCircleRoofLayer,
                    roundFaceLayer,
                    smallCircleLayer,
                    columnCircleLayer,
                    columnRoofCircleLayer,
                    mainCircleLayer,
                    columnRoofLayer,
                    detailRoofLayer,
                    glassRoofLayer,
                ] // end layers
            });

            const view = new SceneView({
                container: ""viewDiv"",
                map: map,
                camera: {
                    position: [105.83705049256521, 21.03738829954599, 1000],
                    heading: 0,
                    tilt: 0,
                ");
                WriteLiteral("}\r\n            });\r\n\r\n            view.popup.defaultPopupTemplateEnabled = true;\r\n        });\r\n    </script>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b51218", async() => {
                WriteLiteral("\r\n    <header id=\"mu-hero\"");
                BeginWriteAttribute("class", " class=\"", 31470, "\"", 31478, 0);
                EndWriteAttribute();
                WriteLiteral(@" role=""banner"">
        <!-- Start menu  -->
        <nav class=""navbar navbar-fixed-top navbar-default mu-navbar"" style=""top: 0px !important"">
            <div class=""container"">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class=""navbar-header"">
                    <button type=""button"" class=""navbar-toggle collapsed"" data-toggle=""collapse"" data-target=""#bs-example-navbar-collapse-1"" aria-expanded=""false"">
                        <span class=""sr-only"">Toggle navigation</span>
                        <span class=""icon-bar""></span>
                        <span class=""icon-bar""></span>
                        <span class=""icon-bar""></span>
                    </button>

                    <!-- Logo -->
                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b52491", async() => {
                    WriteLiteral("Nhóm 10");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Area = (string)__tagHelperAttribute_12.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_13.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_14.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

                </div>

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1"">
                    <ul class=""nav navbar-nav mu-menu navbar-right"">
                        <li>");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b54536", async() => {
                    WriteLiteral("Trang chủ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Area = (string)__tagHelperAttribute_12.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_13.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_14.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("</li>\r\n                        <li><a href=\"#\" class=\"active-map\">Bản đồ 3D</a></li>\r\n                        <li>");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b56305", async() => {
                    WriteLiteral("Tham quan");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Area = (string)__tagHelperAttribute_12.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_13.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_15.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("</li>\r\n                        <li>");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "02c1e2ecd1a0775a7ae660d33eb62fe6071c8d5b57989", async() => {
                    WriteLiteral("Liên hệ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Area = (string)__tagHelperAttribute_12.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_13.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_16.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"</li>
                        <li><a href=""#"">Đăng ký</a></li>
                        <li><a href=""#"">Đăng nhập</a></li>
                    </ul>
                </div>
            </div>
        </nav>
        <!-- End menu -->

        <div class=""mu-hero-overlay"">
            <div class=""container"">
                <div class=""mu-hero-area"">
                </div>
            </div>
        </div>
    </header>
    <!-- End Header -->
    <div id=""viewDiv"" style=""margin-top: 60px""></div>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
